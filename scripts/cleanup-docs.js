#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// ===== SCRIPT PARA LIMPIAR DOCUMENTACI√ìN TEMPORAL =====

function cleanupTemporaryDocs() {
    console.log('üßπ Limpiando documentaci√≥n temporal...');
    
    const tempDir = 'docs/temporary';
    const filesToRemove = [
        'CACHE-FIX-GUIDE.md'
        // NETLIFY-ENV-SETUP.md se mantiene como referencia √∫til
    ];
    
    let removedCount = 0;
    
    filesToRemove.forEach(fileName => {
        const filePath = path.join(tempDir, fileName);
        
        if (fs.existsSync(filePath)) {
            try {
                fs.unlinkSync(filePath);
                console.log(`‚úÖ Eliminado: ${fileName}`);
                removedCount++;
            } catch (error) {
                console.error(`‚ùå Error eliminando ${fileName}:`, error.message);
            }
        } else {
            console.log(`‚ö†Ô∏è No encontrado: ${fileName}`);
        }
    });
    
    // Verificar si la carpeta temporal est√° vac√≠a
    try {
        const remainingFiles = fs.readdirSync(tempDir);
        if (remainingFiles.length === 0) {
            fs.rmdirSync(tempDir);
            console.log('‚úÖ Carpeta temporal eliminada (vac√≠a)');
        } else {
            console.log(`üìÅ Carpeta temporal contiene ${remainingFiles.length} archivos restantes`);
        }
    } catch (error) {
        console.error('‚ùå Error verificando carpeta temporal:', error.message);
    }
    
    console.log(`üéâ Limpieza completada. ${removedCount} archivos eliminados`);
}

// Funci√≥n para listar documentaci√≥n temporal
function listTemporaryDocs() {
    console.log('üìã Listando documentaci√≥n temporal...');
    
    const tempDir = 'docs/temporary';
    
    if (fs.existsSync(tempDir)) {
        try {
            const files = fs.readdirSync(tempDir);
            
            if (files.length === 0) {
                console.log('‚úÖ No hay documentaci√≥n temporal');
            } else {
                console.log('üìÅ Documentaci√≥n temporal encontrada:');
                files.forEach(file => {
                    console.log(`  - ${file}`);
                });
            }
        } catch (error) {
            console.error('‚ùå Error listando documentaci√≥n temporal:', error.message);
        }
    } else {
        console.log('‚úÖ No existe carpeta de documentaci√≥n temporal');
    }
}

// Ejecutar seg√∫n el argumento
const command = process.argv[2];

switch (command) {
    case 'clean':
        cleanupTemporaryDocs();
        break;
    case 'list':
        listTemporaryDocs();
        break;
    default:
        console.log('üìö Script de limpieza de documentaci√≥n');
        console.log('');
        console.log('Uso:');
        console.log('  node scripts/cleanup-docs.js clean  - Limpiar documentaci√≥n temporal');
        console.log('  node scripts/cleanup-docs.js list   - Listar documentaci√≥n temporal');
        break;
}

module.exports = { cleanupTemporaryDocs, listTemporaryDocs };
